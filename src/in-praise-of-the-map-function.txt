# %% [markdown]
# In praise of the map function
This is my love letter to the p5 map function, which as [the help says](https://p5js.org/reference/#/p5/norm),
re-maps a number from one range to another.  I think this is jolly useful, underated, and frees the creative
coder from having think about the math.  We just have to think "I want that range there", and this frees us to
focus on being creative.

It's actually a fairly simple function, the heart of which can be implemented as follows:
# %% [javascript]
const map = function (n, start1, stop1, start2, stop2) {
    var newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;
    return newval;
};
# %% [markdown]
There are also two closely related functions, [lerp](https://p5js.org/reference/#/p5/lerp) and
[norm](https://p5js.org/reference/#/p5/norm), which I personally never both with because
map is completely general and I prefer to explicitly specify ranges even when it is a zero to one range.

So let's get some house-keeping out of the way, then have a look at some sketches which make extensive
use of the map function. 
# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
// Import the p5 library, see the docs here: https://p5js.org/
await import("https://cdn.jsdelivr.net/npm/p5@1.7.0/lib/p5.min.js");
# %% [markdown]
## Example sketch: Production Line
Perhaps the best known and most obvious use of the map function is when you want to animate an object
to move in a straight line from one point to another.  I do a lot of this in my production line animation.
# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
var p5WithCleanup = (sketch, id) => {
    if (!window.sketches) {
        window.sketches = {};
    }

    if (window.sketches[id]) {
        window.sketches[id].remove();
    }

    const p5Instance = new p5(sketch);
    window.sketches[id] = p5Instance;
    return p5Instance;
};

var s = function( p ) {
  var x = 100; 
  var y = 100;
  p.setup = function() {
    p.createCanvas(400, 200);
  };

  p.draw = function() {
    p.background(0);
    p.fill(255);
    p.rect(x,y,50,50);
  };
};
p5WithCleanup(s, 'c1');
