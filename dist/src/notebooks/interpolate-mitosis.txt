# %% [markdown]
# Interpolate Mitosis

A long time ago, someone on a Processing forum asked how to animate cell division, and I gave
them a simple model where points on a single circle are mapped to points on two circles, then
an animation between the two is generated via linear interpolation.

I was reminded of this old sketch by a [recent post](https://www.reddit.com/r/p5js/comments/1k0pjz6/is_there_any_way_to_to_this_in_p5js/)
on the r/p5js sub of Reddit. Not being able to find it, I decided to rewrite it here in p5.

I will be using a lot of map functions. If that's perplexing in any way, try starting with
[In praise of the map function](./in-praise-of-the-map-function.html).

Let's start by bringing in the vectorMap I wrote for [Fractal Curves](./fractal-curves.html).

# %%--- [javascript]
# properties:
#   top_hidden: true
#   run_on_load: true
# ---%%
var p5WithCleanup = (sketch, text) => {
    if (!window.sketches) {
        window.sketches = {};
    }

    if (window.sketches[text]) {
        window.sketches[text].remove();
    }

    var matchedElements = Array.from(document.querySelectorAll('.cell-bottom'));

    var matchedElement = matchedElements.find(
        (elm) => elm.parentElement.textContent.split(text).length > 1,
    );

    if (!matchedElement) {
        throw new Error(`p5WithCleanup: text not found '${text}'`);
    }

    var p5Instance = new p5(sketch, matchedElement);
    window.sketches[text] = p5Instance;
    return p5Instance;
};

# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
await import('/p5-notebook/lib/p5/lib/p5.js');

var createVectorMapFn = (p) => {
    var vectorMap = (n, start1, stop1, start2, stop2) => {
        return p.createVector(
            p.map(n, start1, stop1, start2.x, stop2.x),
            p.map(n, start1, stop1, start2.y, stop2.y),
        );
    };

    return { vectorMap };
};

# %% [markdown]
Now here's a map for moving around in a circle (anti-clockwise starting from the 3 o'clock position,
as is the convention with trig functions).

# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
var createCircleMapFn = (p, xCenter, yCenter, radius) => {
    var circleMap = (n, start1, stop1, start2, stop2) => {
        var theta = p.map(n, start1, stop1, start2, stop2);
        return p.createVector(
            xCenter + radius * Math.cos(theta),
            yCenter + radius * Math.sin(theta),
        );
    };

    return circleMap;
};

# %% [markdown]
## The Sketch

And now for the rest of the owl.

In the setup function we define pointsStart, which is an array of vectors
positioned in a circle. Then the pointsEnd, which represent two circles. The tricky bit is lining the
points up. The main circle has to start drawing from the 12 o'clock position, the left circle from the 3 o'clock
position, and the right circle from the 9 o'clock position. Which I hope explains what would otherwise be
eccentric places to begin and end a circle.

In the draw function we have to decide where we are in the animation, and thus where we are on the continuum between
pointsStart and pointsEnd. Then we can render this as a curved shape.

# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
var interpolateMitosis = (p) => {
    var { CENTER, CLOSE, HALF_PI, PI, TWO_PI } = p;

    var pointCount = 24;
    var halfPointCount = pointCount / 2;
    var animationLength = 100;
    var pointsStart = [];
    var pointsEnd = [];

    var { vectorMap } = createVectorMapFn(p);

    p.setup = () => {
        p.createCanvas(400, 400);
        p.rectMode(CENTER);

        var radius = p.width * 0.2;
        var smallRadius = radius / 3;
        var xCenter = p.width / 2;
        var yCenter = p.height / 2;

        var mainCircleMap = createCircleMapFn(p, xCenter, yCenter, radius);

        var leftCircleMap = createCircleMapFn(
            p,
            xCenter - radius,
            yCenter,
            radius,
        );

        var rightCircleMap = createCircleMapFn(
            p,
            xCenter + smallRadius,
            yCenter,
            smallRadius,
        );

        for (var n = 0; n < pointCount; ++n) {
            pointsStart.push(
                mainCircleMap(n, 0, pointCount, TWO_PI - HALF_PI, -HALF_PI),
            );

            if (n <= halfPointCount) {
                pointsEnd.push(leftCircleMap(n, 0, halfPointCount, TWO_PI, 0));
            } else {
                pointsEnd.push(
                    rightCircleMap(n, halfPointCount, pointCount, 3 * PI, PI),
                );
            }
        }
    };

    var flattenVectorArray = (arr) =>
        arr.reduce((acc, vec) => {
            return [...acc, vec.x, vec.y];
        }, []);

    p.draw = () => {
        p.background(255);
        p.stroke(0);
        p.noFill();

        var direction = Math.floor(p.frameCount / animationLength) % 2;
        var pos = p.frameCount % animationLength;

        if (direction) {
            // Alternating animation segments run in reverse
            pos = animationLength - pos;
        }

        var points = [];

        for (var index = 0; index < pointCount; ++index) {
            var n = index % pointCount;

            var vec = vectorMap(
                pos,
                0,
                animationLength,
                pointsStart[n],
                pointsEnd[n],
            );

            points.push(vec);
        }

        for (var index = 0; index < pointCount; ++index) {
            p.curve(
                ...flattenVectorArray([
                    points[(index + 1) % pointCount],
                    points[(index + 2) % pointCount],
                    points[(index + 3) % pointCount],
                    points[(index + 4) % pointCount],
                ]),
            );
        }

        return points;
    };

    return { pointsStart, pointsEnd };
};

p5WithCleanup(interpolateMitosis, 'interpolateMitosis');

# %% [markdown]
## Conclusion

So, how do you like the final output?
I think it looks fairly slick for the application of a relatively simple idea.
We can shatter the illusion by plotting the points, and observe them all moving in straight lines.

# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
var plotPoints = (p) => {
    var { pointsStart, pointsEnd } = interpolateMitosis(p);
    var origDraw = p.draw;

    p.draw = () => {
        var points = origDraw();
        p.noStroke();
        p.fill(255, 0, 0, 128);

        points.forEach((point) => {
            p.rect(point.x, point.y, 10, 10);
        });

        p.stroke(128);
        for (var n = 0; n < pointsStart.length; ++n) {
            var start = pointsStart[n];
            var end = pointsEnd[n];
            p.line(start.x, start.y, end.x, end.y);
        }
    };
};

p5WithCleanup(plotPoints, 'plotPoints');

# %% [markdown]
The curveVertex function is very convenient, but the only means to control the 'curviness' is to vary the
number and spacing of points. Beziers are more fiddly, but give you more flexibility.
Oh, and do you see that 'knobble' at the 9 o'clock position? I don't think p5 closes shapes drawn
with curves perfectly. But then it might be difficult to get it to consider the last point when curving
the first point, and vice versa.

# %% [markdown]
## Outtake

I made two very pretty mistakes, neither of which I can't reproduce now. But shuffling the points is fun!

# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
var shuffle = (arr) => {
    for (var n = 0; n < arr.length; ++n) {
        var m = Math.floor(Math.random() * arr.length);
        var t = arr[n];
        arr[n] = arr[m];
        arr[m] = t;
    }
};

var shuffleSketch = (p) => {
    var { pointsStart, pointsEnd } = interpolateMitosis(p);
    var origSetup = p.setup;

    p.setup = () => {
        origSetup();
        shuffle(pointsStart);
        shuffle(pointsEnd);
    };
};

p5WithCleanup(shuffleSketch, 'shuffleSketch');
