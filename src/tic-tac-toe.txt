# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%

var winningCells = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
];

// getGameState
//     board - a nine character string of 'X', 'O', and ' '
// returns:
//     ' ' - game is still being played
//     'X' - X wins
//     'O' - O wins
//     '=' - Draw
var getGameState = board => {
    if (board.length !== 9) {
        throw new Error(`${board} is not a tic-tac-toe board`);
    }

    for([a, b, c] of winningCells) {
        if (board[a] !== ' ' && board[a] === board[b] && board[a] === board[c]) {
            return board[a];
        }
    }

    // Draw or ongoing?

    return board.split('').filter(pos => pos !== ' ').length === 9 ? '=' : ' ';
}

var nextGameStates = board => {
    if (getGameState(board) !== ' ') {
        return []; // Game over
    }

    boardArray = board.split('');

    var whoseMove = boardArray.filter(o => o === 'O').length < boardArray.filter( x => x === 'X').length ? 'O' : 'X';

    return boardArray.reduce((acc, value, index) => {
        if (value === ' ') {
            const newBoard = board.substring(0, index) + whoseMove + board.substring(index + 1);;
            return [...acc, newBoard];
        } else {
            return acc;
        }
    }, []);
}

var getAllGameStates = (initialState) => {

    allGameStates.push(initialState);

    return nextGameStates(initialState).forEach((value) => {
        getAllGameStates(value);
    });
}

var allGameStates = [];
getAllGameStates('         ');

var timeTaken = (fn) => {
    const start = performance.now();
    fn();
    const end = performance.now();
    console.log(`Time taken ${((end - start) / 1000).toFixed(2)} seconds`);
}

# %% [markdown]
Now let's put it to the test.
# %% [javascript]
timeTaken(() => {
    var totalGameStates = allGameStates.length;
    console.log(`Total games states ${totalGameStates}`);
});
# %% [javascript]
timeTaken(() => {
    var xWins = allGameStates.filter(value => {
        return getGameState(value) === 'X';
    }).length;

    console.log(`Total games where X wins ${xWins}`);
});
# %% [javascript]
timeTaken(() => {
    var oWins = allGameStates.filter(value => {
        return getGameState(value) === 'O';
    }).length;

    console.log(`Total games where O wins ${oWins}`);
});
# %% [javascript]
timeTaken(() => {
    var wins = allGameStates.filter(value => {
        var state = getGameState(value);
        return state === 'X' || state === 'O';
    }).length;

    console.log(`Total games where someone wins ${wins}`);
});
# %% [javascript]
timeTaken(() => {
    var draws = allGameStates.filter(value => {
        return getGameState(value) === '=';
    }).length;

    console.log(`Total games which draw ${draws}`);
});
# %% [javascript]
timeTaken(() => {
    var games = allGameStates.filter(value => {
        return getGameState(value) !== ' ';
    }).length;

    console.log(`Total games ${games}`);
});
# %% [markdown]
Now let's consider unique states.
# %%--- [javascript]
# properties:
#   run_on_load: true
# ---%%
var unique = (arr) => [...new Set(arr)];
# %% [javascript]
timeTaken(() => {
    var uniqueGameStates = unique(allGameStates).length;

    console.log(`Total games states ${uniqueGameStates}`);
});
